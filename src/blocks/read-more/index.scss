/**
 * Block: Collection - Frontend Styles
 *
 * Frontend specific styles for the Collection block. Handles frontend/editor styling,
 * preview states.
 *
 * @file        blocks/collection
 * @package     Logger Theme
 * @subpackage  orbitools/blocks
 * @author      Adam Cullen, Orbital Tech Team
 * @since       1.0.0
 * @version     1.2.0
 *
 * @see         blocks/collection/editor.scss - Editor styles
 */

$elem_base: 'orb-collection';

.#{$elem_base} {
    &.#{$elem_base}--row {

        display: flex;
        flex-flow: row nowrap;
        align-items: stretch;
        justify-content: flex-start;
        align-content: stretch;
        width: 100%;
        box-sizing: border-box;

        // Set a default gap.
        gap: var(--gutter, var(--wp--style--block-gap, 20px));

        // Responsive Gap Classes - Base (mobile first)
        &.gap-0 { gap: 0; }
        &.gap-small { gap: var(--wp--preset--spacing--small, 1rem); }
        &.gap-medium { gap: var(--wp--preset--spacing--medium, 2rem); }
        &.gap-large { gap: var(--wp--preset--spacing--large, 3rem); }
        &.gap-x-large { gap: var(--wp--preset--spacing--x-large, 4rem); }
        &.gap-2-x-large { gap: var(--wp--preset--spacing--2-x-large, 5rem); }
        
        // Small breakpoint gap classes (810px and up)
        @media (min-width: 810px) {
            &.sm\\:gap-0 { gap: 0; }
            &.sm\\:gap-small { gap: var(--wp--preset--spacing--small, 1rem); }
            &.sm\\:gap-medium { gap: var(--wp--preset--spacing--medium, 2rem); }
            &.sm\\:gap-large { gap: var(--wp--preset--spacing--large, 3rem); }
            &.sm\\:gap-x-large { gap: var(--wp--preset--spacing--x-large, 4rem); }
            &.sm\\:gap-2-x-large { gap: var(--wp--preset--spacing--2-x-large, 5rem); }
        }
        
        // Medium breakpoint gap classes (1080px and up)
        @media (min-width: 1080px) {
            &.md\\:gap-0 { gap: 0; }
            &.md\\:gap-small { gap: var(--wp--preset--spacing--small, 1rem); }
            &.md\\:gap-medium { gap: var(--wp--preset--spacing--medium, 2rem); }
            &.md\\:gap-large { gap: var(--wp--preset--spacing--large, 3rem); }
            &.md\\:gap-x-large { gap: var(--wp--preset--spacing--x-large, 4rem); }
            &.md\\:gap-2-x-large { gap: var(--wp--preset--spacing--2-x-large, 5rem); }
        }
        
        // Large breakpoint gap classes (1360px and up)
        @media (min-width: 1360px) {
            &.lg\\:gap-0 { gap: 0; }
            &.lg\\:gap-small { gap: var(--wp--preset--spacing--small, 1rem); }
            &.lg\\:gap-medium { gap: var(--wp--preset--spacing--medium, 2rem); }
            &.lg\\:gap-large { gap: var(--wp--preset--spacing--large, 3rem); }
            &.lg\\:gap-x-large { gap: var(--wp--preset--spacing--x-large, 4rem); }
            &.lg\\:gap-2-x-large { gap: var(--wp--preset--spacing--2-x-large, 5rem); }
        }
        
        // Extra large breakpoint gap classes (1600px and up)
        @media (min-width: 1600px) {
            &.xl\\:gap-0 { gap: 0; }
            &.xl\\:gap-small { gap: var(--wp--preset--spacing--small, 1rem); }
            &.xl\\:gap-medium { gap: var(--wp--preset--spacing--medium, 2rem); }
            &.xl\\:gap-large { gap: var(--wp--preset--spacing--large, 3rem); }
            &.xl\\:gap-x-large { gap: var(--wp--preset--spacing--x-large, 4rem); }
            &.xl\\:gap-2-x-large { gap: var(--wp--preset--spacing--2-x-large, 5rem); }
        }

        // Constrain Content Class
        // Active when Align is set to full and constrain is checked
        &[data-constrain="true"] {
            max-width: var(--wp--style--global--content-size, 1200px);
            margin-left: auto;
            margin-right: auto;
        }

        // Flex Flow Classes - Combined Dir and Wrap attrs
        // Only output when NOT default value 'row nowrap'
        &[data-flow="row wrap"]             { flex-flow: row wrap; }
        &[data-flow="row wrap-reverse"]     { flex-flow: row wrap-reverse; }
        &[data-flow="column nowrap"]        { flex-flow: column nowrap; }
        &[data-flow="column wrap"]          { flex-flow: column wrap; }
        &[data-flow="column wrap-reverse"]  { flex-flow: column wrap-reverse; }

        // Align Items Classes
        // Only output when NOT default value 'stretch'
        &[data-align="center"]  { align-items: center;}
        &[data-align="start"]   { align-items: flex-start;}
        &[data-align="end"]     { align-items: flex-end;}

        // Justify Content Classes
        // Only output when NOT default value 'flex-start'
        &[data-justify="center"]    { justify-content: center; }
        &[data-justify="end"]       { justify-content: flex-end; }
        &[data-justify="between"]   { justify-content: space-between; }
        &[data-justify="around"]    { justify-content: space-around; }
        &[data-justify="evenly"]    { justify-content: space-evenly; }

        // Stacked Mobile Classes - Controls whether children automatically stack on smaller screens
        // Only output when NOT 'false', default value is always true 'fit'
        &[data-stacked="true"]  {
            @media (max-width: 50.6875rem) {
                flex-wrap: wrap !important;

                &[data-layout="equal"],
                &[data-layout=dodeca],
                &[data-layout=penta] {
                    > .orb-entry {
                        max-width: 100% !important;
                        flex: 1 1 100%;
                    }
                }
            }
        }

        // Layout Classes - Controls classes on children, fit | equal/grow | 5 col grid | 12 col grid
        // Only output when NOT default value 'fit'
        &[data-layout="equal"]  { /* Currently no class required but keeping here for record. */}
        &[data-layout="penta"]  { /* 5-column grid system base styles */ }
        &[data-layout="dodeca"] { /* 12-column grid system base styles */ }
    }
}
